// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 11.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UKPO_5_TEST.ParserUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public partial class ParserUIMap
    {
        
        /// <summary>
        /// ButtonActive - Используйте "ButtonActiveExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ButtonActive()
        {
            #region Variable Declarations
            WinButton uIFindButton = this.UIUKPO_5Window.UIFindWindow.UIFindButton;
            #endregion

            // Убедитесь, что свойство Enabled "Find" кнопка равняется "True"
            Assert.AreEqual(this.ButtonActiveExpectedValues.UIFindButtonEnabled, uIFindButton.Enabled, "Button must be active");
        }
        
        /// <summary>
        /// ButtonNotActive - Используйте "ButtonNotActiveExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ButtonNotActive()
        {
            #region Variable Declarations
            WinButton uIFindButton = this.UIUKPO_5Window.UIFindWindow.UIFindButton;
            #endregion

            // Убедитесь, что свойство Enabled "Find" кнопка равняется "False"
            Assert.AreEqual(this.ButtonNotActiveExpectedValues.UIFindButtonEnabled, uIFindButton.Enabled, "Button must not be active");
        }
        
        /// <summary>
        /// ButtonTabAble - Используйте "ButtonTabAbleExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ButtonTabAble()
        {
            #region Variable Declarations
            WinWindow uIFindWindow = this.UIUKPO_5Window.UIFindWindow;
            #endregion

            // Убедитесь, что свойство TabStop "Find" окно равняется "True"
            Assert.AreEqual(this.ButtonTabAbleExpectedValues.UIFindWindowTabStop, uIFindWindow.TabStop);
        }
        
        /// <summary>
        /// EnterExpression - Используйте "EnterExpressionParams" для передачи параметров в этот метод.
        /// </summary>
        public void EnterExpression()
        {
            #region Variable Declarations
            WinEdit uITextBox2Edit = this.UIUKPO_5Window.UITextBox2Window.UITextBox2Edit;
            #endregion

            // Тип "су.ку" в "textBox2" надпись
            uITextBox2Edit.Text = this.EnterExpressionParams.UITextBox2EditText;
        }
        
        /// <summary>
        /// EnterText - Используйте "EnterTextParams" для передачи параметров в этот метод.
        /// </summary>
        public void EnterText()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UIUKPO_5Window.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Тип "Шла саша по шоссе и сосала сушку" в "textBox1" надпись
            uITextBox1Edit.Text = this.EnterTextParams.UITextBox1EditText;
        }
        
        /// <summary>
        /// ExpressionBoxClear - Используйте "ExpressionBoxClearParams" для передачи параметров в этот метод.
        /// </summary>
        public void ExpressionBoxClear()
        {
            #region Variable Declarations
            WinWindow uITextBox1Window = this.UIUKPO_5Window.UIUKPO_5Client.UITextBox1Window;
            WinEdit uITextBox2Edit = this.UIUKPO_5Window.UITextBox2Window.UITextBox2Edit;
            #endregion

            // Щелкните "textBox1" окно
            Mouse.Click(uITextBox1Window, new Point(187, 77));

            // Тип "" в "textBox2" надпись
            uITextBox2Edit.Text = this.ExpressionBoxClearParams.UITextBox2EditText;

            // Тип "{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}" в "textBox2" надпись
            Keyboard.SendKeys(uITextBox2Edit, this.ExpressionBoxClearParams.UITextBox2EditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ExpressionBoxTabAble - Используйте "ExpressionBoxTabAbleExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ExpressionBoxTabAble()
        {
            #region Variable Declarations
            WinWindow uITextBox2Window = this.UIUKPO_5Window.UITextBox2Window;
            #endregion

            // Убедитесь, что свойство TabStop "textBox2" окно равняется "True"
            Assert.AreEqual(this.ExpressionBoxTabAbleExpectedValues.UITextBox2WindowTabStop, uITextBox2Window.TabStop);
        }
        
        /// <summary>
        /// ExpressionFieldExsists - Используйте "ExpressionFieldExsistsExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ExpressionFieldExsists()
        {
            #region Variable Declarations
            WinWindow uITextBox2Window = this.UIUKPO_5Window.UITextBox2Window;
            #endregion

            // Убедитесь, что свойство Enabled "textBox2" окно равняется "True"
            Assert.AreEqual(this.ExpressionFieldExsistsExpectedValues.UITextBox2WindowEnabled, uITextBox2Window.Enabled);

            // Убедитесь, что свойство Exists "textBox2" окно равняется "True"
            Assert.AreEqual(this.ExpressionFieldExsistsExpectedValues.UITextBox2WindowExists, uITextBox2Window.Exists);
        }
        
        /// <summary>
        /// ExpressionIsVisible - Используйте "ExpressionIsVisibleExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ExpressionIsVisible()
        {
            #region Variable Declarations
            WinWindow uITextBox2Window = this.UIUKPO_5Window.UITextBox2Window;
            #endregion

            // Убедитесь, что свойство Height "textBox2" окно не совпадает с "-1"
            Assert.AreNotEqual(this.ExpressionIsVisibleExpectedValues.UITextBox2WindowHeight, uITextBox2Window.Height);
        }
        
        /// <summary>
        /// FindStart
        /// </summary>
        public void FindStart()
        {
            #region Variable Declarations
            WinButton uIFindButton = this.UIUKPO_5Window.UIFindWindow.UIFindButton;
            #endregion

            // Щелкните "Find" кнопка
            Mouse.Click(uIFindButton, new Point(66, 14));
        }
        
        /// <summary>
        /// StartApp - Используйте "StartAppParams" для передачи параметров в этот метод.
        /// </summary>
        public void StartApp()
        {

            // Запуск "%VisualStudioDir%\Projects\UKPO_5\Debug\UKPO_5.exe"
            ApplicationUnderTest uKPO_5Application = ApplicationUnderTest.Launch(this.StartAppParams.ExePath, this.StartAppParams.AlternateExePath);
        }
        
        /// <summary>
        /// TabOrderTest - Используйте "TabOrderTestParams" для передачи параметров в этот метод.
        /// </summary>
        public void TabOrderTest()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UIUKPO_5Window.UITextBox1Window.UITextBox1Edit;
            WinEdit uITextBox2Edit = this.UIUKPO_5Window.UITextBox2Window.UITextBox2Edit;
            WinButton uIFindButton = this.UIUKPO_5Window.UIFindWindow.UIFindButton;
            #endregion

            // Тип "Шла Саша по шоссе и сосала сушку" в "textBox1" надпись
            uITextBox1Edit.Text = this.TabOrderTestParams.UITextBox1EditText;

            // Тип "{Tab}" в "textBox1" надпись
            Keyboard.SendKeys(uITextBox1Edit, this.TabOrderTestParams.UITextBox1EditSendKeys, ModifierKeys.None);

            // Тип "шос.е" в "textBox2" надпись
            uITextBox2Edit.Text = this.TabOrderTestParams.UITextBox2EditText;

            // Тип "{Tab}" в "textBox2" надпись
            Keyboard.SendKeys(uITextBox2Edit, this.TabOrderTestParams.UITextBox2EditSendKeys, ModifierKeys.None);

            // Тип "{Enter}" в "Find" кнопка
            Keyboard.SendKeys(uIFindButton, this.TabOrderTestParams.UIFindButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// TextBoxClear - Используйте "TextBoxClearParams" для передачи параметров в этот метод.
        /// </summary>
        public void TextBoxClear()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UIUKPO_5Window.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Тип "" в "textBox1" надпись
            uITextBox1Edit.Text = this.TextBoxClearParams.UITextBox1EditText;

            // Тип "{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}" в "textBox1" надпись
            Keyboard.SendKeys(uITextBox1Edit, this.TextBoxClearParams.UITextBox1EditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// TextBoxTabAble - Используйте "TextBoxTabAbleExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void TextBoxTabAble()
        {
            #region Variable Declarations
            WinWindow uITextBox1Window = this.UIUKPO_5Window.UITextBox1Window;
            #endregion

            // Убедитесь, что свойство TabStop "textBox1" окно равняется "True"
            Assert.AreEqual(this.TextBoxTabAbleExpectedValues.UITextBox1WindowTabStop, uITextBox1Window.TabStop);
        }
        
        /// <summary>
        /// TextFieldExists - Используйте "TextFieldExistsExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void TextFieldExists()
        {
            #region Variable Declarations
            WinWindow uITextBox1Window = this.UIUKPO_5Window.UITextBox1Window;
            #endregion

            // Убедитесь, что свойство Enabled "textBox1" окно равняется "True"
            Assert.AreEqual(this.TextFieldExistsExpectedValues.UITextBox1WindowEnabled, uITextBox1Window.Enabled);

            // Убедитесь, что свойство Exists "textBox1" окно равняется "True"
            Assert.AreEqual(this.TextFieldExistsExpectedValues.UITextBox1WindowExists, uITextBox1Window.Exists);
        }
        
        /// <summary>
        /// TextIsVisible - Используйте "TextIsVisibleExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void TextIsVisible()
        {
            #region Variable Declarations
            WinWindow uITextBox1Window = this.UIUKPO_5Window.UITextBox1Window;
            #endregion

            // Убедитесь, что свойство Height "textBox1" окно не совпадает с "-1"
            Assert.AreNotEqual(this.TextIsVisibleExpectedValues.UITextBox1WindowHeight, uITextBox1Window.Height);
        }
        
        /// <summary>
        /// AnswerFieldNotTabAble - Используйте "AnswerFieldNotTabAbleExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AnswerFieldNotTabAble()
        {
            #region Variable Declarations
            WinWindow uIAnswerwillbedisplayeWindow = this.UIUKPO_5Window.UIUKPO_5Client.UIAnswerwillbedisplayeWindow;
            #endregion

            // Убедитесь, что свойство TabStop "Answer will be displayed here" окно равняется "False"
            Assert.AreEqual(this.AnswerFieldNotTabAbleExpectedValues.UIAnswerwillbedisplayeWindowTabStop, uIAnswerwillbedisplayeWindow.TabStop);
        }
        
        /// <summary>
        /// AnswerVisible - Используйте "AnswerVisibleExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AnswerVisible()
        {
            #region Variable Declarations
            WinWindow uIAnswerwillbedisplayeWindow = this.UIUKPO_5Window.UIUKPO_5Client.UIAnswerwillbedisplayeWindow;
            #endregion

            // Убедитесь, что свойство Height "Answer will be displayed here" окно не совпадает с "-1"
            Assert.AreNotEqual(this.AnswerVisibleExpectedValues.UIAnswerwillbedisplayeWindowHeight, uIAnswerwillbedisplayeWindow.Height);
        }
        
        /// <summary>
        /// ButtonVisible - Используйте "ButtonVisibleExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ButtonVisible()
        {
            #region Variable Declarations
            WinWindow uIFindWindow = this.UIUKPO_5Window.UIFindWindow;
            #endregion

            // Убедитесь, что свойство Height "Find" окно не совпадает с "-1"
            Assert.AreNotEqual(this.ButtonVisibleExpectedValues.UIFindWindowHeight, uIFindWindow.Height);
        }
        
        #region Properties
        public virtual ButtonActiveExpectedValues ButtonActiveExpectedValues
        {
            get
            {
                if ((this.mButtonActiveExpectedValues == null))
                {
                    this.mButtonActiveExpectedValues = new ButtonActiveExpectedValues();
                }
                return this.mButtonActiveExpectedValues;
            }
        }
        
        public virtual ButtonNotActiveExpectedValues ButtonNotActiveExpectedValues
        {
            get
            {
                if ((this.mButtonNotActiveExpectedValues == null))
                {
                    this.mButtonNotActiveExpectedValues = new ButtonNotActiveExpectedValues();
                }
                return this.mButtonNotActiveExpectedValues;
            }
        }
        
        public virtual ButtonTabAbleExpectedValues ButtonTabAbleExpectedValues
        {
            get
            {
                if ((this.mButtonTabAbleExpectedValues == null))
                {
                    this.mButtonTabAbleExpectedValues = new ButtonTabAbleExpectedValues();
                }
                return this.mButtonTabAbleExpectedValues;
            }
        }
        
        public virtual EnterExpressionParams EnterExpressionParams
        {
            get
            {
                if ((this.mEnterExpressionParams == null))
                {
                    this.mEnterExpressionParams = new EnterExpressionParams();
                }
                return this.mEnterExpressionParams;
            }
        }
        
        public virtual EnterTextParams EnterTextParams
        {
            get
            {
                if ((this.mEnterTextParams == null))
                {
                    this.mEnterTextParams = new EnterTextParams();
                }
                return this.mEnterTextParams;
            }
        }
        
        public virtual ExpressionBoxClearParams ExpressionBoxClearParams
        {
            get
            {
                if ((this.mExpressionBoxClearParams == null))
                {
                    this.mExpressionBoxClearParams = new ExpressionBoxClearParams();
                }
                return this.mExpressionBoxClearParams;
            }
        }
        
        public virtual ExpressionBoxTabAbleExpectedValues ExpressionBoxTabAbleExpectedValues
        {
            get
            {
                if ((this.mExpressionBoxTabAbleExpectedValues == null))
                {
                    this.mExpressionBoxTabAbleExpectedValues = new ExpressionBoxTabAbleExpectedValues();
                }
                return this.mExpressionBoxTabAbleExpectedValues;
            }
        }
        
        public virtual ExpressionFieldExsistsExpectedValues ExpressionFieldExsistsExpectedValues
        {
            get
            {
                if ((this.mExpressionFieldExsistsExpectedValues == null))
                {
                    this.mExpressionFieldExsistsExpectedValues = new ExpressionFieldExsistsExpectedValues();
                }
                return this.mExpressionFieldExsistsExpectedValues;
            }
        }
        
        public virtual ExpressionIsVisibleExpectedValues ExpressionIsVisibleExpectedValues
        {
            get
            {
                if ((this.mExpressionIsVisibleExpectedValues == null))
                {
                    this.mExpressionIsVisibleExpectedValues = new ExpressionIsVisibleExpectedValues();
                }
                return this.mExpressionIsVisibleExpectedValues;
            }
        }
        
        public virtual StartAppParams StartAppParams
        {
            get
            {
                if ((this.mStartAppParams == null))
                {
                    this.mStartAppParams = new StartAppParams();
                }
                return this.mStartAppParams;
            }
        }
        
        public virtual TabOrderTestParams TabOrderTestParams
        {
            get
            {
                if ((this.mTabOrderTestParams == null))
                {
                    this.mTabOrderTestParams = new TabOrderTestParams();
                }
                return this.mTabOrderTestParams;
            }
        }
        
        public virtual TextBoxClearParams TextBoxClearParams
        {
            get
            {
                if ((this.mTextBoxClearParams == null))
                {
                    this.mTextBoxClearParams = new TextBoxClearParams();
                }
                return this.mTextBoxClearParams;
            }
        }
        
        public virtual TextBoxTabAbleExpectedValues TextBoxTabAbleExpectedValues
        {
            get
            {
                if ((this.mTextBoxTabAbleExpectedValues == null))
                {
                    this.mTextBoxTabAbleExpectedValues = new TextBoxTabAbleExpectedValues();
                }
                return this.mTextBoxTabAbleExpectedValues;
            }
        }
        
        public virtual TextFieldExistsExpectedValues TextFieldExistsExpectedValues
        {
            get
            {
                if ((this.mTextFieldExistsExpectedValues == null))
                {
                    this.mTextFieldExistsExpectedValues = new TextFieldExistsExpectedValues();
                }
                return this.mTextFieldExistsExpectedValues;
            }
        }
        
        public virtual TextIsVisibleExpectedValues TextIsVisibleExpectedValues
        {
            get
            {
                if ((this.mTextIsVisibleExpectedValues == null))
                {
                    this.mTextIsVisibleExpectedValues = new TextIsVisibleExpectedValues();
                }
                return this.mTextIsVisibleExpectedValues;
            }
        }
        
        public virtual AnswerFieldNotTabAbleExpectedValues AnswerFieldNotTabAbleExpectedValues
        {
            get
            {
                if ((this.mAnswerFieldNotTabAbleExpectedValues == null))
                {
                    this.mAnswerFieldNotTabAbleExpectedValues = new AnswerFieldNotTabAbleExpectedValues();
                }
                return this.mAnswerFieldNotTabAbleExpectedValues;
            }
        }
        
        public virtual AnswerVisibleExpectedValues AnswerVisibleExpectedValues
        {
            get
            {
                if ((this.mAnswerVisibleExpectedValues == null))
                {
                    this.mAnswerVisibleExpectedValues = new AnswerVisibleExpectedValues();
                }
                return this.mAnswerVisibleExpectedValues;
            }
        }
        
        public virtual ButtonVisibleExpectedValues ButtonVisibleExpectedValues
        {
            get
            {
                if ((this.mButtonVisibleExpectedValues == null))
                {
                    this.mButtonVisibleExpectedValues = new ButtonVisibleExpectedValues();
                }
                return this.mButtonVisibleExpectedValues;
            }
        }
        
        public UIUKPO_5Window UIUKPO_5Window
        {
            get
            {
                if ((this.mUIUKPO_5Window == null))
                {
                    this.mUIUKPO_5Window = new UIUKPO_5Window();
                }
                return this.mUIUKPO_5Window;
            }
        }
        #endregion
        
        #region Fields
        private ButtonActiveExpectedValues mButtonActiveExpectedValues;
        
        private ButtonNotActiveExpectedValues mButtonNotActiveExpectedValues;
        
        private ButtonTabAbleExpectedValues mButtonTabAbleExpectedValues;
        
        private EnterExpressionParams mEnterExpressionParams;
        
        private EnterTextParams mEnterTextParams;
        
        private ExpressionBoxClearParams mExpressionBoxClearParams;
        
        private ExpressionBoxTabAbleExpectedValues mExpressionBoxTabAbleExpectedValues;
        
        private ExpressionFieldExsistsExpectedValues mExpressionFieldExsistsExpectedValues;
        
        private ExpressionIsVisibleExpectedValues mExpressionIsVisibleExpectedValues;
        
        private StartAppParams mStartAppParams;
        
        private TabOrderTestParams mTabOrderTestParams;
        
        private TextBoxClearParams mTextBoxClearParams;
        
        private TextBoxTabAbleExpectedValues mTextBoxTabAbleExpectedValues;
        
        private TextFieldExistsExpectedValues mTextFieldExistsExpectedValues;
        
        private TextIsVisibleExpectedValues mTextIsVisibleExpectedValues;
        
        private AnswerFieldNotTabAbleExpectedValues mAnswerFieldNotTabAbleExpectedValues;
        
        private AnswerVisibleExpectedValues mAnswerVisibleExpectedValues;
        
        private ButtonVisibleExpectedValues mButtonVisibleExpectedValues;
        
        private UIUKPO_5Window mUIUKPO_5Window;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ButtonActive"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class ButtonActiveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "Find" кнопка равняется "True"
        /// </summary>
        public bool UIFindButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ButtonNotActive"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class ButtonNotActiveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "Find" кнопка равняется "False"
        /// </summary>
        public bool UIFindButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ButtonTabAble"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class ButtonTabAbleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство TabStop "Find" окно равняется "True"
        /// </summary>
        public bool UIFindWindowTabStop = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "EnterExpression"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class EnterExpressionParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "су.ку" в "textBox2" надпись
        /// </summary>
        public string UITextBox2EditText = "су.ку";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "EnterText"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class EnterTextParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "Шла саша по шоссе и сосала сушку" в "textBox1" надпись
        /// </summary>
        public string UITextBox1EditText = "Шла саша по шоссе и сосала сушку";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ExpressionBoxClear"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class ExpressionBoxClearParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "" в "textBox2" надпись
        /// </summary>
        public string UITextBox2EditText = "";
        
        /// <summary>
        /// Тип "{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}" в "textBox2" надпись
        /// </summary>
        public string UITextBox2EditSendKeys = "{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Ba" +
            "ck}{Back}{Back}{Back}{Back}{Back}{Back}{Back}";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ExpressionBoxTabAble"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class ExpressionBoxTabAbleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство TabStop "textBox2" окно равняется "True"
        /// </summary>
        public bool UITextBox2WindowTabStop = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ExpressionFieldExsists"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class ExpressionFieldExsistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "textBox2" окно равняется "True"
        /// </summary>
        public bool UITextBox2WindowEnabled = true;
        
        /// <summary>
        /// Убедитесь, что свойство Exists "textBox2" окно равняется "True"
        /// </summary>
        public bool UITextBox2WindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ExpressionIsVisible"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class ExpressionIsVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Height "textBox2" окно не совпадает с "-1"
        /// </summary>
        public int UITextBox2WindowHeight = -1;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "StartApp"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class StartAppParams
    {
        
        #region Fields
        /// <summary>
        /// Запуск "%VisualStudioDir%\Projects\UKPO_5\Debug\UKPO_5.exe"
        /// </summary>
        public string ExePath = "C:\\Users\\Николай\\Documents\\Visual Studio 2012\\Projects\\UKPO_5\\Debug\\UKPO_5.exe";
        
        /// <summary>
        /// Запуск "%VisualStudioDir%\Projects\UKPO_5\Debug\UKPO_5.exe"
        /// </summary>
        public string AlternateExePath = "%VisualStudioDir%\\Projects\\UKPO_5\\Debug\\UKPO_5.exe";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TabOrderTest"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class TabOrderTestParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "Шла Саша по шоссе и сосала сушку" в "textBox1" надпись
        /// </summary>
        public string UITextBox1EditText = "Шла Саша по шоссе и сосала сушку";
        
        /// <summary>
        /// Тип "{Tab}" в "textBox1" надпись
        /// </summary>
        public string UITextBox1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Тип "шос.е" в "textBox2" надпись
        /// </summary>
        public string UITextBox2EditText = "шос.е";
        
        /// <summary>
        /// Тип "{Tab}" в "textBox2" надпись
        /// </summary>
        public string UITextBox2EditSendKeys = "{Tab}";
        
        /// <summary>
        /// Тип "{Enter}" в "Find" кнопка
        /// </summary>
        public string UIFindButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TextBoxClear"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class TextBoxClearParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "" в "textBox1" надпись
        /// </summary>
        public string UITextBox1EditText = "";
        
        /// <summary>
        /// Тип "{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}" в "textBox1" надпись
        /// </summary>
        public string UITextBox1EditSendKeys = "{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TextBoxTabAble"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class TextBoxTabAbleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство TabStop "textBox1" окно равняется "True"
        /// </summary>
        public bool UITextBox1WindowTabStop = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TextFieldExists"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class TextFieldExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "textBox1" окно равняется "True"
        /// </summary>
        public bool UITextBox1WindowEnabled = true;
        
        /// <summary>
        /// Убедитесь, что свойство Exists "textBox1" окно равняется "True"
        /// </summary>
        public bool UITextBox1WindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TextIsVisible"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class TextIsVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Height "textBox1" окно не совпадает с "-1"
        /// </summary>
        public int UITextBox1WindowHeight = -1;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AnswerFieldNotTabAble"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class AnswerFieldNotTabAbleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство TabStop "Answer will be displayed here" окно равняется "False"
        /// </summary>
        public bool UIAnswerwillbedisplayeWindowTabStop = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AnswerVisible"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class AnswerVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Height "Answer will be displayed here" окно не совпадает с "-1"
        /// </summary>
        public int UIAnswerwillbedisplayeWindowHeight = -1;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ButtonVisible"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class ButtonVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Height "Find" окно не совпадает с "-1"
        /// </summary>
        public int UIFindWindowHeight = -1;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UIUKPO_5Window : WinWindow
    {
        
        public UIUKPO_5Window()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "UKPO_5";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("UKPO_5");
            #endregion
        }
        
        #region Properties
        public UITextBox1Window UITextBox1Window
        {
            get
            {
                if ((this.mUITextBox1Window == null))
                {
                    this.mUITextBox1Window = new UITextBox1Window(this);
                }
                return this.mUITextBox1Window;
            }
        }
        
        public UIFindWindow UIFindWindow
        {
            get
            {
                if ((this.mUIFindWindow == null))
                {
                    this.mUIFindWindow = new UIFindWindow(this);
                }
                return this.mUIFindWindow;
            }
        }
        
        public UITextBox2Window UITextBox2Window
        {
            get
            {
                if ((this.mUITextBox2Window == null))
                {
                    this.mUITextBox2Window = new UITextBox2Window(this);
                }
                return this.mUITextBox2Window;
            }
        }
        
        public UIUKPO_5Client UIUKPO_5Client
        {
            get
            {
                if ((this.mUIUKPO_5Client == null))
                {
                    this.mUIUKPO_5Client = new UIUKPO_5Client(this);
                }
                return this.mUIUKPO_5Client;
            }
        }
        #endregion
        
        #region Fields
        private UITextBox1Window mUITextBox1Window;
        
        private UIFindWindow mUIFindWindow;
        
        private UITextBox2Window mUITextBox2Window;
        
        private UIUKPO_5Client mUIUKPO_5Client;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UITextBox1Window : WinWindow
    {
        
        public UITextBox1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("UKPO_5");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITextBox1Edit.WindowTitles.Add("UKPO_5");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UIFindWindow : WinWindow
    {
        
        public UIFindWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("UKPO_5");
            #endregion
        }
        
        #region Properties
        public WinButton UIFindButton
        {
            get
            {
                if ((this.mUIFindButton == null))
                {
                    this.mUIFindButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIFindButton.SearchProperties[WinButton.PropertyNames.Name] = "Find";
                    this.mUIFindButton.WindowTitles.Add("UKPO_5");
                    #endregion
                }
                return this.mUIFindButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFindButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UITextBox2Window : WinWindow
    {
        
        public UITextBox2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox2";
            this.WindowTitles.Add("UKPO_5");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox2Edit
        {
            get
            {
                if ((this.mUITextBox2Edit == null))
                {
                    this.mUITextBox2Edit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITextBox2Edit.WindowTitles.Add("UKPO_5");
                    #endregion
                }
                return this.mUITextBox2Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox2Edit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UIUKPO_5Client : WinClient
    {
        
        public UIUKPO_5Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinControl.PropertyNames.Name] = "UKPO_5";
            this.WindowTitles.Add("UKPO_5");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItem13Window
        {
            get
            {
                if ((this.mUIItem13Window == null))
                {
                    this.mUIItem13Window = new WinWindow(this);
                    #region Условия поиска
                    this.mUIItem13Window.SearchProperties[WinWindow.PropertyNames.Name] = "13";
                    this.mUIItem13Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIItem13Window.WindowTitles.Add("UKPO_5");
                    #endregion
                }
                return this.mUIItem13Window;
            }
        }
        
        public WinWindow UIAnswerwillbedisplayeWindow
        {
            get
            {
                if ((this.mUIAnswerwillbedisplayeWindow == null))
                {
                    this.mUIAnswerwillbedisplayeWindow = new WinWindow(this);
                    #region Условия поиска
                    this.mUIAnswerwillbedisplayeWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Answer will be displayed here";
                    this.mUIAnswerwillbedisplayeWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIAnswerwillbedisplayeWindow.WindowTitles.Add("UKPO_5");
                    #endregion
                }
                return this.mUIAnswerwillbedisplayeWindow;
            }
        }
        
        public WinWindow UITextWindow
        {
            get
            {
                if ((this.mUITextWindow == null))
                {
                    this.mUITextWindow = new WinWindow(this);
                    #region Условия поиска
                    this.mUITextWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Text";
                    this.mUITextWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUITextWindow.WindowTitles.Add("UKPO_5");
                    #endregion
                }
                return this.mUITextWindow;
            }
        }
        
        public WinWindow UITextBox1Window
        {
            get
            {
                if ((this.mUITextBox1Window == null))
                {
                    this.mUITextBox1Window = new WinWindow(this);
                    #region Условия поиска
                    this.mUITextBox1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITextBox1Window.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    this.mUITextBox1Window.WindowTitles.Add("UKPO_5");
                    #endregion
                }
                return this.mUITextBox1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItem13Window;
        
        private WinWindow mUIAnswerwillbedisplayeWindow;
        
        private WinWindow mUITextWindow;
        
        private WinWindow mUITextBox1Window;
        #endregion
    }
}
